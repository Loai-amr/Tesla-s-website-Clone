{"version":3,"sources":["features/car/carSlice.js","components/Header.js","components/Section.js","components/Home.js","App.js","features/counter/counterAPI.js","features/counter/counterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["carSlice","createSlice","name","initialState","cars","reducers","selectCars","state","car","Header","useState","burgerStatus","setBurgerStatus","useSelector","Container","src","alt","map","index","href","RightMenu","CustomMenu","onClick","BurgerNav","show","CloseWrapper","CustomClose","styled","div","Menu","MenuIcon","props","CloseIcon","Section","title","description","leftBtnText","rightBtnText","backgroundimg","Wrap","bgImage","top","ItemText","Buttons","bottom","ButtonGroup","LeftButton","RightButton","DownArrow","img","Home","App","className","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","value","status","increment","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","carReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e7d3e564.chunk.js","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n    cars: [\"Model S\", \"Model 3\", \"Model X\" ,\"Model Y\" ]\r\n}\r\n\r\nconst carSlice = createSlice({\r\n    name: \"car\",\r\n    initialState,\r\n    reducers:{}\r\n})\r\n\r\nexport const selectCars = state => state.car.cars\r\n\r\nexport default carSlice.reducer","import React,{useState} from 'react'\r\nimport styled from 'styled-components'\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { selectCars } from '../features/car/carSlice';\r\nimport { useSelector } from 'react-redux';\r\n\r\nfunction Header() {\r\n    const [burgerStatus, setBurgerStatus] = useState(false);\r\n    const cars = useSelector(selectCars)\r\n    return (\r\n        <Container>\r\n           <a>\r\n                <img src=\"/images/logo.svg\" alt=\"\" />\r\n           </a>\r\n           <Menu>\r\n               {cars && cars.map((car, index)=>(\r\n                <a key={index } href=\"#\">{car} </a> \r\n               ))}\r\n                 \r\n           </Menu>\r\n            <RightMenu>\r\n                <a href=\"#\">Shop</a>\r\n                <a href=\"#\">Tesla Account</a>\r\n               <CustomMenu onClick={()=>setBurgerStatus(true)} />\r\n            </RightMenu>\r\n            <BurgerNav show={burgerStatus}>\r\n                <CloseWrapper>\r\n                    <CustomClose onClick={()=>setBurgerStatus(false)} />\r\n                </CloseWrapper>\r\n                {cars && cars.map((car, index)=>(\r\n                <li key={index}> <a href=\"#\">{car}</a> </li>\r\n               ))}\r\n                 \r\n                <li> <a href=\"#\">Existing Inventory</a> </li>\r\n                <li> <a href=\"#\">Used Inventory</a> </li>\r\n                <li> <a href=\"#\">TTrade in </a> </li>\r\n                <li> <a href=\"#\">cyber truck</a> </li>\r\n                <li> <a href=\"#\">roadaster</a> </li>\r\n            </BurgerNav>\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Header\r\n\r\nconst Container= styled.div`\r\n    min-height : 60px;\r\n    width:100%;\r\n    position : fixed;\r\n    display : flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    padding: 0 20px;\r\n    z-index:1;\r\n`\r\nconst Menu = styled.div`\r\n    display: flex;\r\n    align-items:center;\r\n    justify-content: center;\r\n    flex:1;\r\n  a {\r\n        font-weight: 600;\r\n        text-transform: uppercase;\r\n        padding : 0 10px;\r\n    }\r\n    @media (max-width: 768px){\r\n       display: none;\r\n    }\r\n`\r\nconst RightMenu= styled.div`\r\n    display:flex;\r\n    align-items: center;\r\na {\r\n    font-weight: 600;\r\n    text-transform: uppercase;\r\n    margin-right: 10px;\r\n}\r\n`\r\nconst CustomMenu = styled(MenuIcon)`\r\ncursor: pointer;\r\n`\r\nconst BurgerNav= styled.div`\r\n    position: fixed;\r\n    top:0;\r\n    bottom:0;\r\n    right:0;\r\n    background-color:white;\r\n    width:300px;\r\n    z-index:16;\r\n    list-style: none;\r\n    padding: 20px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    text-align:start;\r\n    transform:${props => props.show ? 'translateX(0)': 'translateX(100%)'}; \r\n    transition : transform 0.2s ;\r\n    li {\r\n        padding:15px 0;\r\n        border-bottom: 1px solid rgba(0,0,0, .2)\r\n    }\r\n    a {\r\n        font-weight: 600;\r\n    }\r\n`\r\nconst CustomClose= styled(CloseIcon)`\r\n    cursor : pointer;\r\n`\r\nconst CloseWrapper= styled.div`\r\ndisplay:flex;\r\njustify-content: flex-end; \r\n`","import React from 'react'\r\nimport Fade from 'react-reveal/Fade';\r\nimport styled from 'styled-components'\r\n\r\n\r\nfunction Section({title, description,leftBtnText,rightBtnText,backgroundimg}) {\r\n\r\n    return (\r\n        <Wrap bgImage={backgroundimg}>\r\n            <Fade top>\r\n                <ItemText>\r\n                    <h1>{ title }</h1>\r\n                    <p>{ description }</p>\r\n                </ItemText>\r\n            </Fade>\r\n            <Buttons>\r\n            <Fade bottom>\r\n                    <ButtonGroup>\r\n                        <LeftButton>\r\n                            { leftBtnText }\r\n                        </LeftButton>\r\n                        {rightBtnText &&\r\n                        <RightButton>\r\n                        { rightBtnText }\r\n                        </RightButton>\r\n                            }\r\n                    \r\n                    </ButtonGroup>\r\n                </Fade>\r\n                <DownArrow src=\"/images/down-arrow.svg\" />\r\n            </Buttons>\r\n        </Wrap>\r\n    )\r\n}\r\n\r\nexport default Section\r\n\r\n\r\nconst Wrap = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    background-size:cover;\r\n    background-position: center;\r\n    background-repeat:no-repeat; \r\n    background-image: url('/images/model-s.jpg');\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    background-image: ${props => `url(\"/images/${props.bgImage}\")`}\r\n`\r\n\r\nconst ItemText = styled.div`\r\n    padding-top:15vh;\r\n    text-align;center;\r\n`\r\n\r\nconst ButtonGroup= styled.div`\r\n    display: flex;\r\n    margin-bottom: 30px;\r\n    @media (max-width: 768px){\r\n        flex-direction: column;\r\n    }\r\n`\r\n\r\nconst LeftButton = styled.div`\r\n    background-color : rgba(23,26,32,0.8);\r\n    height : 40px;\r\n    width : 256px;\r\n    color : white;\r\n    display : flex;\r\n    justify-content : center;\r\n    align-items : center;\r\n    border-radius: 100px;\r\n    opacity:0.85;\r\n    text-transform: uppercase;\r\n    font-size : 12px;\r\n    cursor:pointer;\r\n    margin : 8px;\r\n`\r\n\r\nconst RightButton = styled(LeftButton)`\r\n    background-color: white;\r\n    opacity : 0.65;\r\n    color: black;\r\n`\r\n\r\nconst DownArrow = styled.img`\r\n    // margin-top:10px;\r\n    height:40px;\r\n    overflow-x: hidden;\r\n    animation: animateDown infinite 1.5s;\r\n`\r\n\r\nconst Buttons = styled.div`\r\n\r\n\r\n`","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Section from \"./Section\"\r\n\r\nfunction Home() {\r\n    return (\r\n        <Container>\r\n            \r\n            <Section\r\n            title=\"Model S\"\r\n            description=\"Order Online for Touchless Delivery\"\r\n            backgroundimg=\"model-s.jpg\"\r\n            leftBtnText =\"Custom order\"\r\n            rightBtnText=\"Existing Inventory\"\r\n            />\r\n            <Section\r\n             title=\"Model Y\"\r\n             description=\"Order Online for Touchless Delivery\"\r\n             backgroundimg=\"model-y.jpg\"\r\n             leftBtnText =\"Custom order\"\r\n             rightBtnText=\"Existing Inventory\"\r\n            />\r\n            <Section\r\n             title=\"Model 3\"\r\n             description=\"Order Online for Touchless Delivery\"\r\n             backgroundimg=\"model-3.jpg\"\r\n             leftBtnText =\"Custom order\"\r\n             rightBtnText=\"Existing Inventory\"\r\n            />\r\n            <Section\r\n             title=\"Model X\"\r\n             description=\"Order Online for Touchless Delivery\"\r\n             backgroundimg=\"model-x.jpg\"\r\n             leftBtnText =\"Custom order\"\r\n             rightBtnText=\"Existing Inventory\"\r\n            />\r\n            <Section\r\n                title=\"Lowest Cost Solar Panels in America\"\r\n                description=\"Money-back guarabtee\"\r\n                backgroundimg=\"solar-panel.jpg\"\r\n                leftBtnText =\"Order now\"\r\n                rightBtnText=\"Learn more\"\r\n            />\r\n              <Section\r\n                title=\"Accessories\"\r\n                description=\"\"\r\n                backgroundimg=\"accessories.jpg\"\r\n                leftBtnText =\"Shop now\"\r\n            />\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default Home\r\n\r\nconst Container = styled.div`\r\n    height: 100vh; \r\n`\r\n\r\n","import React from 'react';\nimport './App.css';\nimport Header from \"./components/Header\"\nimport Home from \"./components/Home\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport carReducer from \"../features/car/carSlice\"\n\nexport const store = configureStore({\n  reducer: {\n    car: carReducer,\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}